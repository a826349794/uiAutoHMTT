<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1593332860658" stop="1593332897143">
  <name>scripts</name>
  <labels/>
  <test-cases>
    <test-case start="1593332860658" status="passed" stop="1593332866818">
      <name>test01_mp_login.TestMpLogin.test_login[13812345678-246810-Xeon]</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="12240-MainThread"/>
        <label name="host" value="PC-20200417ULTX"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
    <test-case start="1593332866844" status="failed" stop="1593332897143">
      <name>test01_mp_login.TestMpLogin.test_login[13612345678-246810-13612345678]</name>
      <failure>
        <message>NoSuchWindowException: Message: no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=83.0.4103.61)
</message>
        <stack-trace>self = &lt;scripts.test01_mp_login.TestMpLogin object at 0x0000000002BC87F0&gt;, phone = '13612345678', code = '246810', expect = '13612345678'

    @pytest.mark.parametrize("phone,code,expect", read_yaml("mp_login.yaml"))
    def test_login(self, phone, code, expect):
        try:
            # 调用登录业务方法
&gt;           self.login.page_mp_login(phone, code)

uiAutoHMTT\scripts\test01_mp_login.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.page_mp_login.PageMpLogin object at 0x0000000002BC80F0&gt;, phone = '13612345678', code = '246810'

    def page_mp_login(self,phone,code):
&gt;       self.page_input_phone(phone)

page\page_mp_login.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.page_mp_login.PageMpLogin object at 0x0000000002BC80F0&gt;, phone = '13612345678'

    def page_input_phone(self,phone):
&gt;       self.base_input(page.mp_phone,phone)

page\page_mp_login.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.page_mp_login.PageMpLogin object at 0x0000000002BC80F0&gt;, loc = ('css selector', "[placeholder='请输入手机号']"), value = '13612345678'

    def base_input(self,loc,value):
        '''
        :param loc:参考查找元素
        :param value: 要输入的文本内容
        :return:
        '''
        # 1.获取元素
&gt;       el = self.base_find(loc)                   #self.base_find(loc)→调用上面查找元素的方法

base\base.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;page.page_mp_login.PageMpLogin object at 0x0000000002BC80F0&gt;, loc = ('css selector', "[placeholder='请输入手机号']"), timeout = 30
poll = 0.5

    def base_find(self,loc,timeout=30,poll=0.5):
        '''
    
        :param loc:By定位方式和对应的值   格式:列表或元祖
        :param timeout:超时时间  默认30秒
        :param poll:访问频率  默认0.5
        :return:元素
        '''
        # 重点:必须返回
        return WebDriverWait(self.drvier,
                             timeout=timeout,
&gt;                            poll_frequency=poll).until(lambda x:x.find_element(*loc))

base\base.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="1f66bbc597e86addf10d3cf21cfe607c")&gt;
method = &lt;function Base.base_find.&lt;locals&gt;.&lt;lambda&gt; at 0x0000000002BBC598&gt;, message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value is not False."""
        screen = None
        stacktrace = None
    
        end_time = time.time() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.time() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

e:\soft\python3.6\lib\site-packages\selenium\webdriver\support\wait.py:80: TimeoutException

During handling of the above exception, another exception occurred:

self = &lt;scripts.test01_mp_login.TestMpLogin object at 0x0000000002BC87F0&gt;, phone = '13612345678', code = '246810', expect = '13612345678'

    @pytest.mark.parametrize("phone,code,expect", read_yaml("mp_login.yaml"))
    def test_login(self, phone, code, expect):
        try:
            # 调用登录业务方法
            self.login.page_mp_login(phone, code)
            # 断言
            nickname = self.login.page_get_nickname()
            print("获取的昵称为：", nickname)
            assert expect == nickname, "断言出错，登录的账号为：{}, 预期结果为：{}".format(nickname, expect)
        except Exception as e:
            # 日志
            log.error(e)
            # 截图
&gt;           self.login.base_get_img()

uiAutoHMTT\scripts\test01_mp_login.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
base\base.py:59: in base_get_img
    self.drvier.get_screenshot_as_file("./image/error.png")
e:\soft\python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:1032: in get_screenshot_as_file
    png = self.get_screenshot_as_png()
e:\soft\python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:1064: in get_screenshot_as_png
    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))
e:\soft\python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:1074: in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)['value']
e:\soft\python3.6\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000000002BC8160&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such window","message":"no such window: target window already closed\\...x7705344D+18]\\n\\tRtlInitializeExceptionChain [0x77A79802+99]\\n\\tRtlInitializeExceptionChain [0x77A797D5+54]\\n"}}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed
E       from unknown error: web view not found
E         (Session info: chrome=83.0.4103.61)

e:\soft\python3.6\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: NoSuchWindowException</stack-trace>
      </failure>
      <attachments>
        <attachment source="b8ed320f-a908-4440-936b-f889fdcc73ad-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="12240-MainThread"/>
        <label name="host" value="PC-20200417ULTX"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
